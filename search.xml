<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Leetcode 238. Product of Array Except Self</title>
    <url>/alexleeblog/2023/07/03/238-leetcode/</url>
    <content><![CDATA[<h3 id="題目說明："><a href="#題目說明：" class="headerlink" title="題目說明："></a>題目說明：</h3><p>給定一組整數的數組nums，傳回answer。<br>answer[i] 的值要等於所有nums值的總乘 (除了nums[i]自己外)</p>
<h5 id="邊界條件："><a href="#邊界條件：" class="headerlink" title="邊界條件："></a>邊界條件：</h5><p>nums 的 prefix 或suffix範圍都在32bit整數內<br>2 &lt;&#x3D; nums.length &lt;&#x3D; 105<br>-30 &lt;&#x3D; nums[i] &lt;&#x3D; 30</p>
<h5 id="題目要求："><a href="#題目要求：" class="headerlink" title="題目要求："></a>題目要求：</h5><p>條件必須在O(n) 時間複雜度，以及不能使用除法符號<br>Follow up:  嘗試在O(1)空間複雜度完成題目</p>
<p>Leetcode 範例1：<br>Input: nums &#x3D; [1, 2, 3, 4]<br>Output: [24, 12, 8, 6]</p>
<p>Leetcode 範例2：<br>Input: nums &#x3D; [-1, 1, 0, -3, 3]<br>Output: [0, 0, 9, 0, 0]</p>
<h3 id="題目圖說："><a href="#題目圖說：" class="headerlink" title="題目圖說："></a>題目圖說：</h3><p>以範例1 為例，<br>answer[0] &#x3D; <del>nums[0]</del> * nums[1] * nums[2] * nums[3] &#x3D; 2 * 3 * 4 &#x3D; 24<br>answer[1] &#x3D; nums[0] * <del>nums[1]</del> * nums[2] * nums[3] &#x3D; 1 * 3 * 4 &#x3D; 12<br>answer[2] &#x3D; nums[0] * nums[1] * <del>nums[2]</del> * nums[3] &#x3D; 1 * 2 * 4 &#x3D; 8<br>answer[3] &#x3D; nums[0] * nums[1] * nums[2] * <del>nums[3]</del> &#x3D; 1 * 2 * 3 &#x3D; 6</p>
<p>得出 answer &#x3D; [24, 12, 8, 6]</p>
<h3 id="題目思路："><a href="#題目思路：" class="headerlink" title="題目思路："></a>題目思路：</h3><ol>
<li>暴力破解</li>
<li>左右兩段雙乘方法 (原版+優化版)</li>
<li>prefix 或suffix思路</li>
</ol>
<h5 id="1-暴力破解"><a href="#1-暴力破解" class="headerlink" title="1. 暴力破解"></a>1. 暴力破解</h5><p>比較直接把 nums 的每一個值都歷遍一次，每一次都把其他所有的值乘起來 (除自身外的值)，然後加在新的陣列Array上。<br>時間複雜度：<br>因為此方法把整組nums都跑一次，每次總乘所有值都再歷遍所有值，所以時間複雜度是 O(n^2)；<br>空間複雜度：<br>因為需要建立一組新的陣列儲存結果，空間複雜度是 O(n)。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">productExceptSelf</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    answer = [<span class="number">1</span>] * n <span class="comment">#this will hold our output</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">            <span class="keyword">if</span> i != j:</span><br><span class="line">                answer[i] = answer[i] * nums[j]   </span><br><span class="line">    <span class="keyword">return</span> answer    </span><br></pre></td></tr></table></figure></div>

<h5 id="2a-左右兩段雙乘方法"><a href="#2a-左右兩段雙乘方法" class="headerlink" title="2a. 左右兩段雙乘方法"></a>2a. 左右兩段雙乘方法</h5><p>建立2個由0組成、長度與nums相同的數組，並設定L[0] &#x3D; 1, R[len(nums)-1] &#x3D; 1<br>L &#x3D; [1, 0, 0, 0] 第1組(L)把nums[0]至nums[2]向左相乘，每次相乘後儲存在 L[i] 中<br>R &#x3D; [0, 0, 0, 1] 第2組(R)把nums[3]至nums[1]向右相乘，每次相乘後儲存在 R[i] 中</p>
<p>得出，<br>L &#x3D; [1,  1,  2, 6]<br>R &#x3D; [24, 12, 4, 1]<br>最後把兩組數列的值上下對應相乘，即可得出 answer [24, 12, 8, 6]</p>
<p>因為只需要歷遍nums 總2次，第一次歷遍L，第二次歷遍R，時間複雜度為O(2N) &#x3D;&gt; O(N)。<br>但最後建立一組answer的數組，空間複雜度為 O(N)。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">productExceptSelf</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line"></span><br><span class="line">        length = <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">        L = [<span class="number">0</span>] * length</span><br><span class="line">        R = [<span class="number">0</span>] * length</span><br><span class="line">        answer = [<span class="number">0</span>] * length</span><br><span class="line"></span><br><span class="line">        L[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length):</span><br><span class="line">            L[i] = nums[i-<span class="number">1</span>] * L[i-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        R[length-<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(length - <span class="number">1</span>)):</span><br><span class="line">            R[i] = nums[i+<span class="number">1</span>] * R[i+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            answer[i] = L[i] * R[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> answer</span><br><span class="line">        <span class="comment">#TC: O(N); SC: O(N)</span></span><br></pre></td></tr></table></figure></div>


<h5 id="2b-左右兩段雙乘方法-Caches儲存-gt-SC優化"><a href="#2b-左右兩段雙乘方法-Caches儲存-gt-SC優化" class="headerlink" title="2b. 左右兩段雙乘方法 + Caches儲存 -&gt; SC優化"></a>2b. 左右兩段雙乘方法 + Caches儲存 -&gt; SC優化</h5><p>SC優化版是省略建立L、R數組，直接在 answer 中相乘，<br>因為只在 answer數組中運算，空間複雜間只有O(1)。</p>
<p>answer &#x3D; [0, 0, 0, 0]<br>answer &#x3D; [1, 0, 0, 0]<br>把nums[0]至nums[2]向左相乘，每次相乘後儲存在 answer[i] 中得出，<br>answer &#x3D; [1, 1, 2, 6]<br>然後再把nums[3]至nums[1]向右相乘，每次相乘後儲存在 R 中<br>R &#x3D; 1 ,          answer &#x3D; [1, 1, 2, 6*1] &#x3D; [1, 1, 2, 6]<br>R &#x3D; 1*4 &#x3D; 4 ,    answer &#x3D; [1, 1, 2*4, 6] &#x3D; [1, 1, 8, 6]<br>R &#x3D; 4*3 &#x3D; 12 ,   answer &#x3D; [1, 1*12, 8, 6] &#x3D; [1, 12, 8, 6]<br>R &#x3D; 12*2 &#x3D; 24 ,  answer &#x3D; [1*24, 1, 8, 6] &#x3D; [24, 12, 8, 6]</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># optimized</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">productExceptSelf</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line"></span><br><span class="line">    length = <span class="built_in">len</span>(nums)</span><br><span class="line">    answer = [<span class="number">0</span>] * length</span><br><span class="line"></span><br><span class="line">    answer[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length):</span><br><span class="line">        answer[i] = nums[i-<span class="number">1</span>] * answer[i-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    R = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(length - <span class="number">1</span>)):</span><br><span class="line">        answer[i] = answer[i] * R</span><br><span class="line">        R = R* nums[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line">    <span class="comment">#TC: O(N), SC: O(1)</span></span><br></pre></td></tr></table></figure></div>
<h5 id="3-Prefix、Postfix-思路"><a href="#3-Prefix、Postfix-思路" class="headerlink" title="3. Prefix、Postfix 思路"></a>3. Prefix、Postfix 思路</h5><p>方法與左右兩段雙乘方法 + Caches儲存的概念幾乎一樣，但是L, R即使用prefix, postfix 表示，如下圖</p>
<pre>
prefix:  
| 1         | a     | a * b | a * b * c |
postfix: 
| b * c * d | c * d | d     | 1         |
</pre>
<p>只要把prefix[i] 跟 postfix[i] 相乘後，即可得出 answer。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Prefix, postfix method</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">productExceptSelf</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    res = [<span class="number">1</span>] * <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">    prefix = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        res[i] = prefix</span><br><span class="line">        prefix = prefix * nums[i]</span><br><span class="line"></span><br><span class="line">    postfix = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        res[i] = res[i] * postfix</span><br><span class="line">        postfix = postfix * nums[i]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">    <span class="comment">#TC: O(N), SC: O(1)</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>array</tag>
        <tag>prefix Sum</tag>
        <tag>caches</tag>
        <tag>memoization</tag>
      </tags>
  </entry>
  <entry>
    <title>Let&#39;s get started!</title>
    <url>/alexleeblog/2023/07/01/my-first-post/</url>
    <content><![CDATA[<p>Hello world? </p>
<p>It is my first time writing a blog.<br>Honestly, I have no idea how to do and start it, I’m not a good author I guess.<br>But I need to record those things that I learned systemically and improve my programming skill effectively. </p>
<p>That’s why I start this blog, hoping it can take me further in my career. </p>
<h4 id="What-I’m-focusing-on"><a href="#What-I’m-focusing-on" class="headerlink" title="What I’m focusing on?"></a>What I’m focusing on?</h4><p>Now I’m working on Tensorflow with Python, my ultimate goal is to create an AI chatbot website for specific situation.<br>So people can access datas much easier and faster than google search it. </p>
<h4 id="What-is-it-about-on-this-blog"><a href="#What-is-it-about-on-this-blog" class="headerlink" title="What is it about on this blog?"></a>What is it about on this blog?</h4><p>I will record my learning process, including Leetcode algorithm training (mostly), Tensorflow learning, HTML&#x2F;CSS studying, everything that I learned and want to share on this website. </p>
]]></content>
      <categories>
        <category>journal</category>
      </categories>
      <tags>
        <tag>journal</tag>
      </tags>
  </entry>
</search>
